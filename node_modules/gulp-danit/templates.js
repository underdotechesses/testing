export const htmlTemplate = `<!DOCTYPE html>
<html lang="en">
\t<head>
\t\t<meta charset="UTF-8" />
\t\t<meta name="viewport" content="width=device-width, initial-scale=1.0" />
\t\t<title>Document</title>
\t\t<link rel="stylesheet" href="./css/main.css" />
\t</head>
\t<body>
\t\tStart you codding here :)
\t</body>
</html>`

export const scssTemplate = `// * Це головний sass/scss файл проекту
// * імпортуйте сюди всі інші ваші файли sass/scss
`

export const imagesTemplate = `# В цій папкі зберігайте всі зображення до проекту. Можете розподіляти їх на окремі папки.`;

export const fontsTemplate = `# В цій папці зберігайте файли шрифтів, якщо підключаєте їх локально.`;

export const gulpfileTemplate = `import gulp from "gulp";
const { src, dest, watch, series, parallel } = gulp;

import imagemin from "gulp-imagemin";
import autoprefixer from "gulp-autoprefixer";
import csso from "gulp-csso";
import clean from "gulp-clean";
import dartSass from "sass";
import gulpSass from "gulp-sass";
const sass = gulpSass(dartSass);

import bsc from "browser-sync";
const browserSync = bsc.create();

const htmlTaskHandler = () => {
\treturn src("./src/*.html").pipe(dest("./dist"));
};

const cssTaskHandler = () => {
\treturn src("./src/scss/main.scss")
\t\t.pipe(sass().on("error", sass.logError))
\t\t.pipe(autoprefixer())
\t\t.pipe(csso())
\t\t.pipe(dest("./dist/css"))
\t\t.pipe(browserSync.stream());
};

const imagesTaskHandler = () => {
\treturn src("./src/img/**/*.*")
\t\t.pipe(imagemin())
\t\t.pipe(dest("./dist/img"));
};

const fontTaskHandler = () => {
\treturn src("./src/fonts/**/*.*").pipe(dest("./dist/fonts"));
};

const cleanDistTaskHandler = () => {
\treturn src("./dist", { read: false, allowEmpty: true }).pipe(
\t\tclean({ force: true })
\t);
};

const browserSyncTaskHandler = () => {
\tbrowserSync.init({
\t\tserver: {
\t\t\tbaseDir: "./dist",
\t\t},
\t});

\twatch("./src/scss/**/*.scss").on(
\t\t"all",
\t\tseries(cssTaskHandler, browserSync.reload)
\t);
\twatch("./src/*.html").on(
\t\t"change",
\t\tseries(htmlTaskHandler, browserSync.reload)
\t);
\twatch("./src/img/**/*").on(
\t\t"all",
\t\tseries(imagesTaskHandler, browserSync.reload)
\t);
};

export const cleaning = cleanDistTaskHandler;
export const html = htmlTaskHandler;
export const css = cssTaskHandler;
export const font = fontTaskHandler;
export const images = imagesTaskHandler;

export const build = series(
\tcleanDistTaskHandler,
\tparallel(htmlTaskHandler, cssTaskHandler, fontTaskHandler, imagesTaskHandler)
);
export const dev = series(build, browserSyncTaskHandler);
`;

export const packageJsonTemplate = `{
  "name": "gulp-overview",
  "version": "1.0.0",
  "description": "Gulp overview for build project",
  "main": "gulpfile.js",
  "scripts": {
    "dev": "gulp dev",
    "build": "gulp build"
  },
  "author": "dan.it education",
  "license": "ISC",
  "devDependencies": {
    "browser-sync": "^2.29.3",
    "cssnano": "^6.0.1",
    "gulp": "^4.0.2",
    "gulp-autoprefixer": "^8.0.0",
    "gulp-clean": "^0.4.0",
    "gulp-clean-css": "^4.3.0",
    "gulp-concat": "^2.6.1",
    "gulp-csso": "^4.0.1",
    "gulp-imagemin": "^8.0.0",
    "gulp-sass": "^5.1.0",
    "sass": "^1.69.4"
  },
  "browserslist": ["last 3 version"],
  "type": "module"
}
`;

export const gitignoreTemplate = `node_modules
dist`;